// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Client {
    id            Int      @id @default(autoincrement())
    number        Int
    category_id   Int
    category      Category @relation(fields: [category_id], references: [id])
    status        Status
    seat          Int?
    creation_date DateTime @default(now())

    @@unique([number, category_id])
}

enum Status {
    Waiting
    InService
}

model Category {
    id                    Int                 @id @default(autoincrement())
    short_name            Category_Short_Name @unique
    counter               Int
    last_counter_reset    DateTime
    clients               Client[]
}

enum Category_Short_Name {
    A
    B
    C
    D
    E
    F
    G
    H
    I
    J
    K
    L
    M
    N
    O
    P
    Q
    R
    S
    T
    U
    V
    W
    X
    Y
    Z
}

model User {
    id       Int      @id @default(autoincrement())
    username String   @unique
    password String
    role     UserRole
}

enum UserRole {
    User
    Admin
}

model Device {
    id       Int     @id @default(autoincrement())
    accepted Boolean @default(false)
}

model Global_Setting {
    id    Int    @id @default(autoincrement())
    key   String @unique //key of settings
    value String
}

model User_Setting {
    id      Int    @id @default(autoincrement())
    user_id Int
    key     String //key of settings
    value   String

    @@unique([user_id, key])
}

//texts are grouped by module_name.key.lang
model Multilingual_Text {
    id          Int      @id @default(autoincrement())
    module_name String
    key         Int
    lang        LangCode
    value       String

    @@unique([key, lang, module_name])
}

enum LangCode {
    en
    pl
}
